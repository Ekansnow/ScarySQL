#Dataset description for movies table:
#
#1) id - tmdb movie id
#2) imdb_id - imdb movie id
#3) popularity -A numeric quantity specifying the movie popularity.
#4) budget -The budget in which the movie was made.
#5) revenue - The worldwide revenue generated by the movie.
#6) original_title- The title of the movie
#7) cast - The name of the lead and supporting actors.
#8) homepage - A link to the homepage of the movie.
#9) director - The name of the director of the movie
#10) tagline - Movie's tagline.
#11) keywords -The keywords or tags related to the movie.
#12) overview -A brief description of the movie.
#13) runtime -The running time of the movie in minutes.
#14) genres -The genres of the movies
#15) production_companies-The production house of the movie.
#16) release_date -the date on which it was released.
#17) vote_count -the count of votes received.
#18) vote_average - average ratings the movie received.
#19) release_year - the year on which it was released.'



#Find all the titles of the movies directed by 'Noah Baumbach' from the given movies dataset.

Select original_title FROM movies where director = 'Noah Baumbach'

#Find all the movie titles and their cast that belongs to the 'Comedy' genre using the movies table.

Select original_title,cast FROM movies where genres  = 'Comedy'

#Calculate the weighted average rating from the columns vote count and vote average and save the 
#column as 'Weighted_avg_rating' and display the top 10 movies and their rating up to two decimals 
#based on the new column created.
#Note: Use the given formula to calculate a weighted average rating (v/(v+m) * R) + (m/(m+v) * C )
#Where,
#v is the number of votes for the movie vote_count;
#
#m is the minimum votes required, take m as 104.0;
#
#R is the average rating of the movie vote_average;
#
#C is the mean vote across the whole report take c as 5.97.
#Return the columns 'original_title' , 'Weighted_avg_rating'

SELECT original_title, ROUND(( vote_count/(vote_count+104.0) * vote_average) + (104.0/(104.0+ vote_count) * 5.97 ),2) 
AS 'Weighted_avg_rating' 
FROM movies ORDER BY Weighted_avg_rating DESC ;

#Show the details of the movie's original_title, director, genres, cast, budget, revenue, runtime, and vote_average 
#which has keywords like 'sport' or 'sequel' or 'suspense'.
#Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.

select original_title, director, genres, cast, budget, revenue, runtime, vote_average from movies where keywords ='sport' 
or keywords ='sequel' or keywords ='suspense';

#Find all the titles of the movies as "Title" in upper case and concatenate the title with the 
#respective tagline of the movie separated by a hyphen(-) for the Top 10 highest revenue movies.
#Return the column as 'Title'.
#Note: For example, the 'Title' should be displayed as 'JURASSIC WORLD-THE PARK IS OPEN.'

SELECT UPPER(CONCAT(original_title,"-",tagline)) AS Title FROM movies ORDER BY revenue DESC LIMIT 10;

# HR DB-----------------------------------------------------------------

#Find those employee's full_name (first name and last name separated by space) and their salaries whose salary 
#is not in the range 6000 and 18000 (Begin and end values are included). Sort the result in ascending 
#order by the full_name. Return full_name and salary.
#Return the columns 'full_name', 'salary'.

SELECT CONCAT(first_name," ", last_name) AS 'full_name', salary FROM employees 
where salary < 6000 or salary > 18000 ORDER BY full_name;

#Find the employee_id, employee's full name (first and last name separated by space) as 'full_name', salary 
#who are working in the departments 'Administration', 'Marketing', ' Human Resources'.
#Return the columns 'employee_id', 'full_name', and 'salary'.

SELECT employee_id, CONCAT(first_name," ", last_name) AS 'full_name', salary FROM employees where department_id IN 
(SELECT department_id FROM departments where department_name IN ('Administration', 'Marketing', 'Human Resources'));

#Find the details of all the employees first_name, last_name, job_id, and 
#hire_date who were hired between the dates November 15th, 1998 and August 25th, 2001.
#Return the columns 'first_name', 'last_name', 'job_id', and 'hire_date'.

SELECT first_name, last_name, job_id, hire_date FROM employees where hire_date Between '1998-11-15' and '2001-08-25';

#Find all the employee's full_name(first name and last name separated by space), 
#employee id, and phone number whose first name ends with the letter 'n'.
#Return the columns 'employee_id', 'full_name' and 'phone_number'.

SELECT employee_id, CONCAT(first_name," ",last_name) AS full_name, phone_number FROM employees where first_name LIKE "%n";

#Write a query to display the employee's name (first name and last name separated by space) as 'full_name', 
#employee id, and salary of all employees who report to Adam.
#Return the columns 'employee_id', 'full_name', 'salary'.

SELECT employee_id, CONCAT(first_name," ",last_name) AS full_name,salary FROM employees where manager_id IN 
(SELECT employee_id FROM employees where first_name = "Adam")

#Find the employee's details full_name (first name and last name separated by space), 
#salary, department id, and job id of those employees who work the same job as the employee with employee_id as 107.
#Return the columns 'full_name', 'salary', 'department_id', 'job_id'.

SELECT  CONCAT(first_name," ",last_name) AS full_name,salary, department_id, job_id FROM employees where job_id = 
(SELECT job_id FROM employees where employee_id = 107);

#Display the employeeâ€™s first name and last name, employee id, and job id for all 
#employees whose department location is in Seattle.
#Return the columns 'first_name', 'last_name', 'employee_id', and job_id'.

SELECT  first_name,last_name, employee_id, job_id FROM employees where department_id IN 
(SELECT department_id FROM departments where location_id IN (SELECT location_id FROM locations where city = "Seattle"));